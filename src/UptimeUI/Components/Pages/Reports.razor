@page "/reports"
@rendermode InteractiveServer
@using UptimeData
@inject IEndpointService EndpointService
@inject IToastService ToastService

<PageTitle>Reports - Uptime Monitor</PageTitle>

<div class="row">
    <div class="col-md-12">
        <h1 class="display-4">Reports & Analytics</h1>
        <p class="lead">View detailed statistics and trends for your monitored endpoints.</p>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Endpoint Selector</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <select class="form-select" @bind="selectedEndpointId">
                            <option value="">All Endpoints</option>
                            @if (endpoints != null)
                            {
                                @foreach (var endpoint in endpoints)
                                {
                                    <option value="@endpoint.Id">@endpoint.Url</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-primary w-100" @onclick="ShowReport" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Show Report
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title">Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <button class="btn btn-outline-primary" @onclick="() => LoadTimePeriodStats(24)">
                        Last 24 Hours
                    </button>
                    <button class="btn btn-outline-info" @onclick="() => LoadTimePeriodStats(72)">
                        Last 72 Hours
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="() => LoadTimePeriodStats(336)">
                        Last 2 Weeks
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (reportData != null)
{
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Overall Statistics</h5>
                    <small class="text-muted">@GetSelectedEndpointText()</small>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-2">
                            <div class="text-center">
                                <h3 class="text-primary">@reportData.TotalHits</h3>
                                <p class="text-muted">Total Hits</p>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <h3 class="text-success">@reportData.SuccessfulHits</h3>
                                <p class="text-muted">Successful</p>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <h3 class="text-danger">@reportData.FailedHits</h3>
                                <p class="text-muted">Failed</p>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <h3 class="text-info">@reportData.SuccessRate.ToString("F1")%</h3>
                                <p class="text-muted">Success Rate</p>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <h3 class="text-warning">@GetLastSuccessText()</h3>
                                <p class="text-muted">Last Success</p>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="text-center">
                                <h3 class="text-danger">@GetLastFailureText()</h3>
                                <p class="text-muted">Last Failure</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Time-based Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0">Last 24 Hours</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-6">
                                            <small class="text-muted">Total:</small>
                                            <div class="fw-bold">@stats24h.Total</div>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Success:</small>
                                            <div class="fw-bold text-success">@stats24h.SuccessRate.ToString("F1")%</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card border-info">
                                <div class="card-header bg-info text-white">
                                    <h6 class="mb-0">Last 72 Hours</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-6">
                                            <small class="text-muted">Total:</small>
                                            <div class="fw-bold">@stats72h.Total</div>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Success:</small>
                                            <div class="fw-bold text-success">@stats72h.SuccessRate.ToString("F1")%</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card border-secondary">
                                <div class="card-header bg-secondary text-white">
                                    <h6 class="mb-0">Last 2 Weeks</h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-6">
                                            <small class="text-muted">Total:</small>
                                            <div class="fw-bold">@stats2w.Total</div>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">Success:</small>
                                            <div class="fw-bold text-success">@stats2w.SuccessRate.ToString("F1")%</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Recent Activity Timeline</h5>
                </div>
                <div class="card-body">
                    @if (recentHits != null && recentHits.Any())
                    {
                        <div class="timeline">
                            @foreach (var hit in recentHits.Take(20))
                            {
                                <div class="timeline-item mb-3">
                                    <div class="d-flex align-items-center">
                                        <div class="timeline-marker">
                                            <span class="@GetHitStatusIconClass(hit)"></span>
                                        </div>
                                        <div class="timeline-content flex-grow-1 ms-3">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div>
                                                    <div class="fw-bold">@hit.MonitoredEndpoint?.Url</div>
                                                    <div class="text-muted">
                                                        Status: @hit.ReturnCode | @hit.HitDate.ToString("yyyy-MM-dd HH:mm:ss")
                                                    </div>
                                                </div>
                                                <div class="text-end">
                                                    <span class="@GetHitStatusBadgeClass(hit)">
                                                        @(hit.WasSuccessful ? "Success" : "Failed")
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="text-muted">No recent activity data available.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body text-center py-5">
                    <h5 class="text-muted">Select an endpoint and click "Show Report" to view detailed statistics.</h5>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<MonitoredEndpoint>? endpoints;
    private IEnumerable<MonitoredEndpointHit>? recentHits;
    private string selectedEndpointId = "";
    private bool isLoading = false;
    private ReportData? reportData;
    private (int Total, int Successful, int Failed, double SuccessRate) stats24h;
    private (int Total, int Successful, int Failed, double SuccessRate) stats72h;
    private (int Total, int Successful, int Failed, double SuccessRate) stats2w;
    private DateTime? lastSuccess;
    private DateTime? lastFailure;

    protected override async Task OnInitializedAsync()
    {
        await LoadEndpoints();
    }

    private async Task LoadEndpoints()
    {
        try
        {
            endpoints = await EndpointService.GetAllEndpointsAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading endpoints: {ex.Message}");
        }
    }

    private async Task ShowReport()
    {
        isLoading = true;
        try
        {
            await LoadReportData();
            await LoadTimePeriodStats();
            await LoadRecentActivity();
            ToastService.ShowSuccess("Report generated successfully");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error generating report: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadReportData()
    {
        var totalHits = await EndpointService.GetTotalHitsCountAsync();
        var successfulHits = await EndpointService.GetSuccessfulHitsCountAsync();
        var failedHits = await EndpointService.GetFailedHitsCountAsync();
        var successRate = await EndpointService.GetSuccessRateAsync();

        lastSuccess = await EndpointService.GetLastSuccessfulHitAsync();
        lastFailure = await EndpointService.GetLastFailedHitAsync();

        reportData = new ReportData
        {
            TotalHits = totalHits,
            SuccessfulHits = successfulHits,
            FailedHits = failedHits,
            SuccessRate = successRate
        };
    }

    private async Task LoadTimePeriodStats(int hours = 0)
    {
        if (hours > 0)
        {
            var from = DateTime.UtcNow.AddHours(-hours);
            var to = DateTime.UtcNow;
            var stats = await EndpointService.GetStatsForPeriodAsync(from, to);
            
            if (hours == 24) stats24h = stats;
            else if (hours == 72) stats72h = stats;
            else if (hours == 336) stats2w = stats;
        }
        else
        {
            stats24h = await EndpointService.GetStatsLast24HoursAsync();
            stats72h = await EndpointService.GetStatsLast72HoursAsync();
            stats2w = await EndpointService.GetStatsLast2WeeksAsync();
        }
    }

    private async Task LoadRecentActivity()
    {
        recentHits = await EndpointService.GetRecentHitsAsync(50);
    }

    private string GetSelectedEndpointText()
    {
        if (string.IsNullOrEmpty(selectedEndpointId))
            return "All Endpoints";
        
        var endpoint = endpoints?.FirstOrDefault(e => e.Id.ToString() == selectedEndpointId);
        return endpoint?.Url ?? "Unknown Endpoint";
    }

    private string GetLastSuccessText()
    {
        if (lastSuccess == null) return "Never";
        
        var timeSince = DateTime.UtcNow - lastSuccess.Value;
        return timeSince.TotalMinutes < 1 ? "Just now" :
               timeSince.TotalHours < 1 ? $"{(int)timeSince.TotalMinutes}m ago" :
               timeSince.TotalDays < 1 ? $"{(int)timeSince.TotalHours}h ago" :
               $"{(int)timeSince.TotalDays}d ago";
    }

    private string GetLastFailureText()
    {
        if (lastFailure == null) return "Never";
        
        var timeSince = DateTime.UtcNow - lastFailure.Value;
        return timeSince.TotalMinutes < 1 ? "Just now" :
               timeSince.TotalHours < 1 ? $"{(int)timeSince.TotalMinutes}m ago" :
               timeSince.TotalDays < 1 ? $"{(int)timeSince.TotalHours}h ago" :
               $"{(int)timeSince.TotalDays}d ago";
    }

    private string GetHitStatusIconClass(MonitoredEndpointHit hit)
    {
        return hit.WasSuccessful ? "bi bi-check-circle text-success" : "bi bi-x-circle text-danger";
    }

    private string GetHitStatusBadgeClass(MonitoredEndpointHit hit)
    {
        return hit.WasSuccessful ? "badge bg-success" : "badge bg-danger";
    }

    public class ReportData
    {
        public int TotalHits { get; set; }
        public int SuccessfulHits { get; set; }
        public int FailedHits { get; set; }
        public double SuccessRate { get; set; }
    }
}

<style>
    .timeline-item {
        position: relative;
    }

    .timeline-marker {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        border-radius: 50%;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .timeline-content {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 12px;
        border-left: 3px solid #dee2e6;
    }
</style>